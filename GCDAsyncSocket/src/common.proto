syntax = "proto2";
package RPC;

option java_package = "cn.jingzhuan.rpc.pb";

// ======================================= 公共部分 =======================================

// 消息类型枚举(不能改只能加)
enum eum_method_type
{
   common_error_rep = 0;            // 常规错误信息
   load_detector = 1;               // 服务测速
   server_login = 2;                // 服务器登录包
   server_login_ret = 3;            // 服务器登录结果包
   client_login = 4;                // 客户端登录包
   client_login_ret = 5;            // 客户端登录结果包
   login_conflict = 6;              // 重复登录被踢下线
   index_request = 7;	            // 请求选股
   index_result = 8;	            // 返回选股结果
   index_combo_result = 9;          // 组合返回选股结果
   error_feedback = 10;             // 错误信息
   subcribe_topic = 11;             // 订阅主题(约定服务类型common_service)
   unsubcribe_topic = 12;           // 取消订阅(约定服务类型common_service)
   public_topic = 13;               // 组播一个包

   index_data_request = 14;         // K线副图指标请求包
   index_data_result = 15;          // K线副图指标结果包

   rise_drop_request = 16;		    // 请求沪深涨跌
   rise_drop_result = 17;		    // 沪深涨跌结果包

   tg_r_stock_pool = 18;            // 请求股票池
   // tg_r_msg_box(body 为空) ->  tg_msg_box_combo_msg
   tg_r_msg_box = 19;               // 请求消息盒子最近的历史消息

   // 请求返回某个个股的最新行情
   report_report_request = 20;          // 对应的包report_msg
   report_report_result  = 21;          // 对应的包s_report_array_result_msg

   // 请求返回某个个股的大单数据
   report_largedeal_request = 22;          
   report_largedeal_result  = 23;

   // 请求返回分时数据
   report_minute_request = 24;             // 对应的包s_minute_msg
   report_minute_result  = 25;             // 对应的包s_minute_array_result_msg

   // 请求返回K线数据
   report_kline_request = 26;              // 对应的包s_kline_msg
   report_kline_result  = 27;              // 对应的包s_kline_array_result_msg

   // 请求搜索个股
   report_search_stock_request = 28;       // 对应的包search_stock_msg
   report_search_stock_result = 29;        // 对应的包search_stock_array_result_msg

   // 请求排行榜数据
   report_boardreport_request = 30;        // 对应的包s_board_report_data_msg
   report_boardreport_result = 31;         // 对应的包s_borad_report_result_msg

	// 请求分笔数据
   report_bid_deal_request = 32;           // 对应的包s_biddeal_msg
   report_bid_deal_result = 33;            // 对应的包s_biddeal_array_result_msg
   
   // 返回最近的开盘日
   report_last_open_day_request = 34;
   report_last_open_day_result = 35;
   
   // 通过code,请求排行榜
   report_boardreport_optional_request = 36;                      // 对应的包s_board_report_optional_msg
   report_boardreport_optional_result = 37;                       // 对应的包s_borad_report_optional_result_msg
   
   // 通过板块代码(int的那个), 请求每个排在前几个的股票
   report_boardreport_top_request = 38;                            // 对应的包s_borad_report_top_msg
   report_boardreport_top_result = 39;                             // 对应的包s_borad_report_top_result_msg

   // 获取用户预警配置
   warning_warning_config_request = 40;
   warning_warning_config_result = 41;

   // 获取用户的所有个股预警状态
   warning_warning_user_all_stock_status_request = 42;
   warning_warning_user_all_stock_status_result = 43;


   // 设置用户预警配置
   warning_set_warning_config_request = 44;
   warning_set_warning_config_result = 45;

	// 删除用户个股预警配置
   warning_delete_user_stock_warning_config_request = 46;
   warning_delete_user_stock_warning_config_result = 47;

   // 请求持仓统计的数据
   report_index_keep_request = 49;                                         // 对应的包s_index_keep_msg
   report_index_keep_result = 50;                                          // 对应的包s_index_keep_result_msg

   // 请求板块关系的数据
   report_block_relation_request = 51;                                     // 对应的包s_block_relation_request
   report_block_relation_result = 52;                                       // 对应的包s_block_relation_result

   // 获取用户历史预警信息
   warning_get_user_stock_warning_record_request = 53;
   warning_get_user_stock_warning_record_result = 54;

   // 获取所用的code和name的对应关系表
   report_code_name_request = 55;                                   // 对应的包无
   report_code_name_result = 56 ;                                   // 对应的包s_code_name_relation_result

   eum_sync_notify = 1000;          // 请求特定主题的消息推送同步
   eum_push_notify = 1001;          // 通用消息推送
   eum_push_ack = 1002;             // 消息确认(用于推送的游标同步)
   eum_combo_private_notify = 1003; // 打包推送用户最近的私有消息

   eum_auth_kick_user = 2000;       // 鉴权服务踢出重复登录用户
   eum_auth_user_offline = 2001;    // 下游用户离线通知(网关->查询服务)
   eum_auth_user_info_req = 2002;   // 用户账号信息请求
   eum_auth_user_info_rep = 2003;   // 用户账号信息返回

   eum_method_end = 200000000;      // 预分配最大值(新的值不能超过它)
}

// 服务域枚举(不能改只能加)要支持多服务，service name采用数字在效率上有优势,当然字符串更加直观)
enum eum_rpc_service
{
   common_service = 1;            // 内部通讯消息
   report_service = 2;            // 行情服务
   index_service = 3;             // 指标服务
   investment_service = 4;        // 投顾服务
   warning_service = 5;           // 预警服务
   eum_service_end = 200000000;   // 预分配最大值(新的值不能超过它)
}

// key-value型的扩展消息
message ext_key_info
{
    required string key = 1;   // 字段名称
	required string value = 2; // 字段值
}

message subcribe_msg
{
   required eum_rpc_service service_type = 1;   // 订阅的指定类型的服务器的消息
	/* 
	主题, 目前有的主题
    ———————————————————————————————-———————————
    |   服务器    |        主题	         |  rpc_root_msg->service |  service_type       |
    |——————————————————|————————————-———————————
    |投顾服务器   |  tg_$(PID)_public    |	common_service        | investment_service  |
    |——————————————————|————————————-———————————
    |投顾服务器   |  tg_$(UID)_private   |  common_service        | investment_service  |
    ———————————————————————————————-———————————
	|指标服务器   | index_$(UID)_warning |  common_service        | warning_service     |
    ———————————————————————————————-———————————
	|行情服务器   | report_common_public |  common_service        | report_service      |
    ——————————————————————————————————————————
	*/
   required string topic = 2;                   
}

enum eum_nofity_type
{
   tg_stock_in_pool_notify = 0;          // 调入组合通知
   tg_stock_out_pool_notify = 1;         // 调出组合通知
   tg_stock_modify_target_nofity = 2;    // 修改止盈价格通知
   tg_stock_modify_stop_nodify = 3;      // 修改止损价格通知
   tg_stock_buy_nodify = 4;              // 买入通知
   tg_stock_profit_sell_nofity = 5;      // 系统(手动)止盈
   tg_stock_stop_loss_nofity = 6;        // 系统(手动)止损
   tg_focus_news = 7;                    // 要闻速递
   tg_trailer_and_notice = 8;            // 通知预告

   common_update_notice = 9;             // 数据更新通知(仅通知更新数据的种类，客户端按照约定再去拉取数据

   // 通用推送结构： push_notify_msg.sub_msg -> warning_record
   index_stock_warning_notice = 10;		// 指标服务器， 个股预警

   // 行情服务器通用推送：开盘，　收盘的状态切换
   report_market_status_notify = 11;
};

// 请求最近的推送
message sync_notify_msg
{
   required int64 uid = 1;               // 用户自己的ID
   required string topic = 2;            // 指定的推送主题(如:tg_public,tg_private)
   optional int64 last_seq = 3;          // 可选(用户自己把上次已经消费的消息位置上传,如果不上传则从服务器的数据端查询)
   repeated ext_key_info ext_param = 4;  // 类JSON可变扩展字段
}

// 通用的推送消息，用于所有情况的消息推送
message push_notify_msg
{
    required eum_nofity_type notify_type = 1;  // 推送的消息类型
	required int64 msg_seq = 2;                // 消息流水号
	optional bytes sub_msg = 3;                // 嵌套的待解析的子消息(考虑到通用性,这样的方式比较通用)
}

message notify_ack_msg
{ 
   required string topic = 1;                 // 消息主题
   required int64 msg_seq = 2;                // 消息ID
   required int64 uid = 3;                    // 用户ID，用于确认私有消息的消费索引

   	/* 
	主题, 目前有的主题,注意此处不要硬编码，应该用push_notify_msg消息的上级rpc_root_msg里面的service字段填充自己的rpc_root_msg.
    ———————————————————————————————
    |   服务器    |        主题	         |  rpc_root_msg->service |
    |——————————————————|————————————
    |投顾服务器   |  tg_$(PID)_public    |	investment_service    | 
    |——————————————————|————————————
    |投顾服务器   |  tg_$(UID)_private   |  investment_service    | 
    ———————————————————————————————
	|指标服务器   | index_$(UID)_warning |  warning_service       |
    ———————————————————————————————
	|行情服务器   | report_common_public |  report_service        | 
    ———————————————————————————————
	*/
}

message common_update_notice_msg
{
   repeated ext_key_info ext_param = 1;       // 更新信息
}

// 私有消息历史，组合推送
message combo_private_msg
{
    required int64 ack_seq = 1;                  // 本消息回复的ack
	/*
	个股更新字段:
	———————————————————
    |   KEY    |        VALUE	         |
    |——————————————————|
    |  "topic" |      "stock_trace"      |
    |——————————————————|
    |  "stock" |      "stock_code"       |
    ———————————————————
	投顾私人问答回复
	———————————————————
    |   KEY       |        VALUE	     |
    |——————————————————|
    |  "topic"    |   "question_reply"   |
    |——————————————————|
    |  "question" |      "问题"          |
    ———————————————————
    |  "reply"    |   "投顾的回复内容"   |
    ———————————————————
	|  "qid"      |"问题的ID, 可用于索引"|
    ———————————————————

	*/
    repeated common_update_notice_msg msgs = 2;  // 打包的组合消息
}

message rpc_msg_root
{
  // 服务类型(用于服务分发，因为考虑后续的服务器有很多类型,需要支持multiService)
  required eum_rpc_service service = 1; 
 
  // 方法名字
  required eum_method_type method  = 2;

  // 串列化的二级包体，根据method调用对应的PB类解析
  optional bytes body = 3;

  // 请求流水号(对客户端)
  optional uint32 seq = 4;

  // 请求会话sid(事件过期用)
  optional uint32 sid = 5;

  // 请求回话的cid(事件过期用)
  optional uint32 cid = 6;

  // 组播主题
  optional string pub_sub = 7;

  // 是否需要转发权限控制(客户端转填充转发给网关)
  optional bool need_auth_ctx = 8;         // 客户端填充，提示网关需要将缓冲的权限信息转发到上游

  // 权限信息(网关会话层填充转发给上游服务)
  repeated ext_key_info ext = 9;           // 补充信息(用户特殊的权限控制)
}

message common_reply_error_msg
{
    required eum_method_type org_type = 1;  // 原请求类型
	required string error = 2;              // 错误信息
}

// 服务测速包
message load_dector_msg
{
    required bool Req = 1;             // 是否请求包
    optional uint32 load_factor = 2;   // 负载因子
    optional uint32 connect_count = 3; // 当前连接数
	optional uint32 send_time = 4;     // 客户端发包的时间
}

// 服务器登录包
message server_login_msg
{
    required string name = 1;
	required string password = 2;
}

// 服务器登录包
message server_login_result_msg
{
	required bool result = 1;
}

// 客户端登录包
message client_login_msg
{
    enum login_type
    {
		index_pc = 0;
		index_mobile = -1002;
		tg_pc = -1000;
		tg_mobile = -1001;
    }

    required string name = 1;
	required string password = 2;
	required string bios = 3;
	required string mac = 4;
	required string hdd = 5;
	required string cpu = 6;
	required string ip = 7;
	optional login_type ltype = 8;  // 根据不同产品进行不同登录
	optional uint32 sid = 9;        // 会话sid-网关专用
	optional uint32 cid = 10;       // 会话cid-网关专用
}

// 权限控制上下文信息
message auth_ctx_msg
{
    repeated eum_rpc_service auth_services = 1;   // 该会话可以请求的服务类型
	repeated subcribe_msg topics = 2;             // 该会话自动订阅的推送主题
	repeated ext_key_info ext = 3;                // 补充信息(用户特殊的权限控制)
}

// 客户端登录包
message client_login_result_msg
{
	required bool result = 1;
	optional string msg = 2;
	repeated ext_key_info ext = 3;     // 补充信息
	optional int32 ltype = 4;          // 类型ID(目前主要是投顾版和普通版本, 一个类型全局限制登录一个实例)
	optional uint32 sid = 5;           // 会话sid-网关专用
	optional uint32 cid = 6;           // 会话cid-网关专用
	optional auth_ctx_msg auths = 7;   // 权限控制信息
}


// 数据选择器
message time_range_selector
{
	// 开始时间
	required uint32 begin = 1;
	// 结束时间
	required uint32 end = 2;
}

message count_offset_selector
{
	// offset : 指从最新一条数据往前偏移
	required uint32 offset = 1;
	// count > 0 : 数据区间 (offset, offset + count]
	// count < 0 : 数据区间 (offset + count, offset]
	required int32 count = 2;
}

message time_offset_selector
{
	// 起始时间
	required uint32 origin_time = 1;
	// count > 0 : 取大于origin_time时间的N个数据
	// count < 0 : 取小于origin_time时间的N个数据
	required int32 count = 2;
}

message data_selector
{
	/*
	类型
	———————————————————
    | KEY   |             VALUE	         |
    |——————————————————|
    |  0    | selector为空， 取全周期    |
    |——————————————————|
    |  1    |  time_range_selector       |
    ———————————————————
    |  2    |   count_offset_selector    |
    ———————————————————
    |  3    |   time_offset_selector     |
    ———————————————————
	|  4    |返回全部个股(仅用于搜索接口)|
    ———————————————————
	*/
	required uint32 selector_type = 1;
	optional bytes selector = 2;
}